{{- if .Values.statefulSets.enabled -}}
{{- range .Values.statefulSets.statefulsets }}
{{- $statefulSetName := (required "Each entry in statefulSets.statefulsets needs a name" .name) }}
{{- $dictOfBasicLabels := include "chart.basicLabels" $ | fromYaml }}
{{- $dictOfBasicSelectorLabels := include "chart.basicSelectorLabels" $ | fromYaml }}
{{- $statefulSetFullName := printf "%s-%s" (include "chart.fullname" $ | trunc 40) $statefulSetName }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $statefulSetFullName }}
  labels:
    {{- range $k, $v := $dictOfBasicLabels }}
    {{- if eq $k "app" }}
    {{ $k }}: {{ $statefulSetFullName }}
    {{- else}}
    {{ $k }}: {{ $v }}
    {{- end }}
    {{- end }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      {{- range $k, $v := $dictOfBasicSelectorLabels }}
      {{- if eq $k "app" }}
      {{ $k }}: {{ $statefulSetFullName }}
      {{- else}}
      {{ $k }}: {{ $v }}
      {{- end }}
      {{- end }}
  serviceName: {{ $statefulSetFullName }}
  template:
    metadata:
      annotations:
        checksum/{{ include "chart.fullname" $ }}-configmap: {{ include (print $.Template.BasePath "/configmap.yaml") $ | sha256sum }}
        checksum/{{ include "chart.fullname" $ }}-secret: {{ include (print $.Template.BasePath "/secret.yaml") $ | sha256sum }}
        {{- if not $.Values.istio.enabled }}
        sidecar.istio.io/inject: "false"
        {{- end }}
        {{- include "chart.buildExtraAnnotations" (dict "excludeGlobalExtraAnnotations" .excludeGlobalExtraAnnotations "extraAnnotations" .extraAnnotations "values" $.Values) | indent 8 }}
      labels:
        {{- range $k, $v := $dictOfBasicLabels }}
        {{- if eq $k "app" }}
        {{ $k }}: {{ $statefulSetFullName }}
        {{- else}}
        {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
    spec:
      enableServiceLinks: {{ $.Values.enableServiceLinks }}
      securityContext:
        fsGroup: {{ $.Values.podSecurityContext.fsGroup }}
      terminationGracePeriodSeconds: 10
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  {{- range $k, $v := $dictOfBasicSelectorLabels }}
                  - key: {{ $k | quote }}
                    operator: In
                    values:
                    {{- if eq $k "app" }}
                    - {{ $statefulSetFullName | quote }}
                    {{- else }}
                    - {{ $v | quote }}
                    {{- end }}
                  {{- end }}
              topologyKey: kubernetes.io/hostname
      containers:
        - name: {{ $statefulSetFullName | quote }}
          image: {{ include "chart.buildImagePath" (dict "image" .image "values" $.Values ) | quote }}
          {{- if (and .image .image.pullPolicy) }}
          imagePullPolicy: {{ .image.pullPolicy }}
          {{- else }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          {{- end }}
          securityContext:
            {{- toYaml (merge dict $.Values.securityContext (or .securityContext dict)) | nindent 12}}
          ports:
            - containerPort: {{ required "Each entry in statefulSets.statefulsets needs a port" .port }}

          {{- if .command }}
          command: [{{ .command | quote }}]
          {{- end }}

          {{- if .args }}
          args:
            {{- toYaml .args | nindent 10 }}
          {{- end }}

          {{- if .env }}
          env:
          {{- range $k, $v := .env }}
          - name: {{ $k | quote}}
            value: {{ $v | quote }}
          {{- end }}
          {{- end }}

          {{- if or $.Values.configData $.Values.secretData}}
          envFrom:
          {{- if $.Values.configData }}
          - configMapRef:
              name: {{ include "chart.fullname" $ }}
          {{- end }}
          {{- if $.Values.secretData }}
          - secretRef:
              name: {{ include "chart.fullname" $ }}
          {{- end }}
          {{- end }}

          {{- with .volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- if .resources}}
          resources:
            {{- toYaml .resources | nindent 12 }}
          {{- else }}
          {{- with $.Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}

      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if or .volumes (and $.Values.volumes (ne .excludeGlobalVolumes true)) }}
      volumes:
      {{- if and $.Values.volumes (ne .excludeGlobalVolumes true) }}
      {{- toYaml $.Values.volumes | nindent 6 }}
      {{- end }}
      {{- if .volumes }}
      {{- toYaml .volumes | nindent 6 }}
      {{- end }}
      {{- end }}

{{- end }}
{{- end }}


{{- if $.Values.statefulSets.enabled -}}
{{- range $.Values.statefulSets.statefulsets }}
{{- $statefulSetName := (required "Each entry in statefulSets.statefulsets needs a name" .name) }}
{{- $dictOfBasicLabels := include "chart.basicLabels" $ | fromYaml }}
{{- $dictOfBasicSelectorLabels := include "chart.basicSelectorLabels" $ | fromYaml }}
{{- $statefulSetFullName := printf "%s-%s" (include "chart.fullname" $ | trunc 40) $statefulSetName }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $statefulSetFullName }}
  labels:
    {{- range $k, $v := $dictOfBasicLabels }}
    {{- if eq $k "app" }}
    {{ $k }}: {{ $statefulSetFullName }}
    {{- else}}
    {{ $k }}: {{ $v }}
    {{- end }}
    {{- end }}
spec:
  clusterIP: None  {{/*  aka a headless service*/}}
  ports:
    - port: {{ .port }}
      targetPort: {{ or .targetPort .port }}
      name: http
  selector:
    {{- range $k, $v := $dictOfBasicSelectorLabels }}
    {{- if eq $k "app" }}
    {{ $k }}: {{ $statefulSetFullName }}
    {{- else}}
    {{ $k }}: {{ $v }}
    {{- end }}
    {{- end }}
{{- end }}
{{- end }}
