{{- if .Values.deployment.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    {{- include "chart.basicLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "chart.basicSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/{{ include "chart.fullname" . }}-configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/{{ include "chart.fullname" . }}-secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- if not .Values.istio.enabled }}
        sidecar.istio.io/inject: "false"
        {{- end }}
        {{- if .Values.extraAnnotations }}
        {{- toYaml .Values.extraAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "chart.basicLabels" . | nindent 8 }}
    spec:
      {{- if .Values.imagePullSecrets }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      serviceAccount: {{ include "chart.fullname" . }}
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  {{- $dictOfBasicSelectorLabels := include "chart.basicSelectorLabels" . | fromYaml }}
                  {{- range $k, $v := $dictOfBasicSelectorLabels }}
                  - key: {{ $k | quote }}
                    operator: In
                    values:
                    - {{ $v | quote }}
                  {{- end }}
              topologyKey: kubernetes.io/hostname
      {{- if .Values.deployment.initContainers.enabled }}
      initContainers:
        {{- range .Values.deployment.initContainers.containers }}
        - name: {{ required "A valid name for each initContainer is required!" .name | lower }}
          image: {{ include "chart.buildImagePath" (dict "image" .image "values" $.Values ) }}
          {{- if and .image (default dict .image).pullPolicy }}
          imagePullPolicy: {{ .image.pullPolicy }}
          {{- else }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          {{- end }}
          securityContext:
            {{- toYaml (default $.Values.securityContext .securityContext) | nindent 12}}

          {{- if .command }}
          command: [{{ .command | quote }}]
          {{- end }}

          {{- if .args }}
          args: {{- toYaml .args | nindent 10 }}
          {{- end }}

          {{- if or $.Values.configData $.Values.secretData}}
          envFrom:
          {{- if $.Values.configData }}
          - configMapRef:
              name: {{ include "chart.fullname" $ }}
          {{- end }}

          {{- if $.Values.secretData }}
          - secretRef:
              name: {{ include "chart.fullname" $ }}
          {{- end }}
          {{- end }}

          {{- with $.Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- with (default $.Values.resources .resources) }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

        {{- end }}
      {{- end }}
      containers:
        - name: {{ include "chart.fullname" . | quote }}
          image: {{ required "You must include image.registry" .Values.image.registry }}:{{ required "You must include image.tag" .Values.image.tag }}
          securityContext:
            {{- toYaml (required ".Values.securityContexts is required" .Values.securityContext) | nindent 12 }}
          ports:
            - containerPort: {{ required "Values.service.port is required" .Values.service.port }}

          {{- if .Values.deployment.command }}
          command: [{{ .Values.deployment.command | quote }}]
          {{- end }}

          {{- if .Values.deployment.args }}
          args:
            {{- toYaml .Values.deployment.args | nindent 10 }}
          {{- end }}

          {{- if or .Values.configData .Values.secretData}}
          envFrom:
          {{- if .Values.configData }}
          - configMapRef:
              name: {{ include "chart.fullname" . }}
          {{- end }}

          {{- if .Values.secretData }}
          - secretRef:
              name: {{ include "chart.fullname" . }}
          {{- end }}
          {{- end }}

          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 6 }}
      {{- end }}
{{- end }}
