#########################################################
# Define the main deployment of the app                 #
#########################################################
# Overrides for the name
nameOverride: ""
fullnameOverride: ""

# Image and any required credentials to download it for the default deployment
image:
  registry: ""
  tag: ""
  pullPolicy: Always
  credentials:
    create: false
    username: ""
    password: ""
    secretRef: ""

# Default security context
# container context, compliant with Pod Security Standard "restricted"
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  privileged: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault
  runAsGroup: 1050
  runAsUser: 1050

# pod context (inherited by all containers)
podSecurityContext:
  fsGroup: 1050

# Specify image pull secrets if required or if you have it creating registry credentials
# imagePullSecrets: 
# - name: Release.name--registry-secret

# Enable deployment - by default we enable a simple deployment
deployment: 
  enabled: true
  mainContainerNameOverride: ""
  command: ""
  args: []
  # by default, disable initContainers
  initContainers:
    enabled: false
    containers: []
#      - name: migrations
#        image:
#          registry: "path/to/registry"
#          tag: "my-tag"
#          pullPolicy: always
#        command: 'python'
#        args: ['manage.py', 'migrate_schemas']
#        securityContext: {}
#        resources: {}

# Configure the number of pods for this service.  If autoscale is enabled, replica count is not used.
replicaCount: 1
autoscale:
  enabled: false
  minPods: 2
  maxPods: 4
  cpuAverageUtilizationThreshold: 70

podDisruptionBudget: 
  enabled: false

# Enable and configure a service with a reasonable default port
service:
  type: ClusterIP
  port: 8080
#  targetPort: 8080  # will use port by default

# Configure resources it will be given with reasonable defaults
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 128Mi

# pod liveness and readiness probes to check the applications health
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe: {}
  # httpGet:
  #   path: /health
  #   port: 8080
  #   httpHeaders:
  #   - name: Custom-Header
  #     value: Awesome
  # initialDelaySeconds: 3
  # periodSeconds: 3

readinessProbe: {}

# List key/value pairs to be included in this service's ConfigMap
configData: {}
  #K8EZ: 'YES'

# Set secret data key-value pairs that will be loaded into env variables
secretData: {}
#  K8ezSecret: 'YES'

# List of files to load into configmaps.  Supports glob patterns, all files that match will be put into the configmap
configFiles: []
#   - fileGlob: files/config.toml
#     configMapName: config.toml

# List of extra annotations to be injected into pod templates
extraAnnotations: {}
# A potential use of these would be to implement Hashicorp's Vault Agent
  # vault.hashicorp.com/agent-inject: "true"
  # vault.hashicorp.com/agent-pre-populate: "true"
  # vault.hashicorp.com/agent-pre-populate-only: "true"
  # vault.hashicorp.com/agent-init-first: "true"
  # vault.hashicorp.com/role: "my-role"
  # vault.hashicorp.com/agent-inject-secret-vault.env: "secrets/data/my-secret"
  # vault.hashicorp.com/agent-inject-template-vault.env: |
  #   {{- with secret "secrets/data/my-secret/app" -}}
  #   key = "{{.Data.data.my_secret.value -}}"

# See https://kubernetes.io/docs/concepts/storage/volumes/
volumes: []
#  - name: mydir
#    hostPath:
#      # Ensure the file directory is created.
#      path: /var/local/aaa
#      type: DirectoryOrCreate

volumeMounts: []
#  - name: myvolume
#    mountPath: /mount

# See https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistentVolumeClaims: []
#   - name: efs
#     accessMode: ReadWriteMany
#     storageClass: my-storage-class
#     size: 50Gi

# Possibly select a certain type of node
nodeSelector: {}

# Set tolerations
tolerations: []

# Set pod affinity
affinity: {}

# sets whether containers get the kubernetes generated env vars for addresses to other services in the same namespace
enableServiceLinks: true

###########
# Ingress #
###########
# Deploys a Kubernetes Ingress resource, defaults to nginx ingress controller.
# If networking.k8s.io/v1 is available in your cluster that will be used,
# otherwise fall back to networking.k8s.io/v1
k8sIngress:
  enabled: false
  hosts: []
    # Add lists of hosts
    # - example.local
    #- "localhost"
  path: /
  annotations:
    # kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # kubernetes.io/ingress.allow-http: false
    # kubernetes.io/tls-acme: true
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: dash-certificate
    #   hosts:
    #     - example.local

# Deploys an Istio VirtualService and DestinationRule
istio:
  enabled: false
  gateways: []
  hosts: []
  paths: []
  loadBalancerType: ROUND_ROBIN
  useCustomLoadBalancer: false
  forceHttpRedirect: false
  customLoadBalancer: {}
    # consistentHash:
    #   httpCookie:
    #     name: my_cookie_name
    #     ttl: 300s
  mtls:
    enabled: false

#########################################################
# Stateful Sets                                         #
#########################################################
statefulSets:
  enabled: false
  statefulsets: []
#    - name: nginx
#      replicaCount: 1
#      excludeGlobalExtraAnnotations: true  # false if unset
#      extraAnnotations:
#        testing: 1234
#      image:
#        registry: nginx
#        tag: latest
#        pullPolicy: always
#      port: 4000
#      targetPort: 8080
#      serviceType: "ClusterIP"
#      command: "sh"
#      args: ["test", "me"]
#      excludeGlobalVolumes: true  # false if unset
#      volumes: []
#      volumeMounts: []
#      resources: {}  # will default to global resources
#      env: # additional env vars
#        ENV_VAR_1: "my env var"
#      securityContext:
#        testing: 5678

#############################################################
# Additional Deployments                                    #
#############################################################
extraDeployment:
  enabled: false
  hpaExtra: # autoscaling
    enabled: false
  deployments: []
#    - name: nginx-TEST
#      replicaCount: 1
#      excludeGlobalExtraAnnotations: true  # false if unset
#      extraAnnotations:
#        testing: 1234
#      image:
#        registry: nginx
#        tag: latest
#        pullPolicy: always
#      port: 4000
#      targetPort: 8080
#      serviceType: "ClusterIP"
#      command: "sh"
#      args: ["test", "me"]
#      excludeGlobalVolumes: true  # false if unset
#      volumes: []
#      volumeMounts: []
#      resources: {}  # will default to global resources
#      env: # additional env vars
#        ENV_VAR_1: "my env var"
#      securityContext:
#        testing: 5678
#      minPods: 2
#      maxPods: 4
#      cpuAverageUtilizationThreshold: 70


############
# CronJobs #
############
cronJobs:
  enabled: true
  scheduled: []
#    - name: abc
#      image:
#        registry: nginx
#        tag: latest
#        pullPolicy: always
#      securityContext:
#        testing: 1234
#      schedule: "30 * * * *" # every 30 min
#      command: "sh"
#      args: []
#      volumes: []
#      volumeMounts: []
#      env: {} # additional env vars

########
# Jobs #
########
jobs:
  enabled: false
  jobs: []
#    - name: nginx
#      excludeGlobalExtraAnnotations: true  # false if unset
#      extraAnnotations:
#        testing: 1234
#      image:
#        registry: nginx
#        tag: latest
#        pullPolicy: always
#      securityContext:
#        testing: 5678
#      restartPolicy: ""  # will default to "Never"
#      command: "sh"
#      args: ["test", "me"]
#      env: # additional env vars
#       ENV_VAR_1: "my env var"
#      resources: {}  # will default to global resources
#      excludeGlobalVolumes: true  # false if unset
#      volumes: []
#      volumeMounts: []
