#########################################################
# Define the main deployment of the app                 #
#########################################################
# Overrides for the name
nameOverride: ""
fullnameOverride: ""

# Image and any required credentials to download it for the default deployment
image:
  image: "redis"
  tag: "7.2.1"
  pullPolicy: Always

# Default security contetx
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  privileged: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault
  runAsUser: 999 # redis image creates this user
  runAsGroup: 999 # redis image creates this user

# pod context (inherited by all containers)
podSecurityContext:
  fsGroup: 1050

# Specify image pull secrets if required or if you have it creating registry credentials
# imagePullSecrets:
# - name: Release.name--registry-secret

# Enable deployment - by default we enable a simple deployment
deployment:
  enabled: true
  command: "sh"
  args: ["-c", "sleep 1000"]
  # by default, disable initContainers
  initContainers:
    enabled: false
    containers:
      - name: init-container-sleep
        image:
          image: alpine
          tag: 3.18.4
          pullPolicy: always
        command: 'sh'
        args: ['-c', 'sleep 1000']
        securityContext:
          runAsGroup: 1050
          runAsUser: 1050
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi

# Configure the number of pods for this service.  If autoscale is enabled, replica count is not used.
replicaCount: 2
autoscale:
  enabled: false
  minPods: 2
  maxPods: 4
  cpuAverageUtilizationThreshold: 70

podDisruptionBudget:
  enabled: true

# Enable and configure a service with a reasonable default port
service:
  type: ClusterIP
  port: 80

# Configure resources it will be given with reasonable defaults
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 128Mi

# pod liveness and readiness probes to check the applications health
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
# livenessProbe:
#   httpGet:
#     path: /health
#     port: 8080
#     httpHeaders:
#     - name: Custom-Header
#       value: Awesome
#   initialDelaySeconds: 3
#   periodSeconds: 3

# readinessProbe:
#   httpGet:
#     path: /health
#     port: 8080
#     httpHeaders:
#     - name: Custom-Header
#       value: Awesome
#   initialDelaySeconds: 3
#   periodSeconds: 3

# List key/value pairs to be included in this service's ConfigMap
configData:
  K8EZ: 'YES'

# Set secret data key-value pairs that will be loaded into env variables
# this expects values are already base64 encoded
secretData:
  SECRET: 'dmFsdWU='

configFiles:
  - configMapName: all-yaml
    fileGlob: "files/**.yaml"

extraAnnotations:
  someExtraAnnotation: annotationValueHere

# See https://kubernetes.io/docs/concepts/storage/volumes/
volumes:
  - name: mydir
    hostPath:
      # Ensure the file directory is created.
      path: /var/local/aaa
      type: DirectoryOrCreate

volumeMounts:
  - name: mydir
    mountPath: /mount

# See https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistentVolumeClaims:
  - name: myvolumeclaim
    accessMode: ReadWriteMany
    storageClassName: default
    size: 50Gi

# Possibly select a certain type of node
nodeSelector: {}

# Set tolerations
tolerations: []

# Set pod affinity
affinity: {}

# sets whether containers get the kubernetes generated env vars for addresses to other services in the same namespace
enableServiceLinks: true

###########
# Ingress #
###########
# Deploys a Kubernetes Ingress resource, defaults to nginx ingress controller.
# If networking.k8s.io/v1 is available in your cluster that will be used,
# otherwise fall back to networking.k8s.io/v1
k8sIngress:
  enabled: true
  hosts:
    - example.local
  path: /
  annotations:
    # kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # kubernetes.io/ingress.allow-http: false
    # kubernetes.io/tls-acme: true
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: dash-certificate
    #   hosts:
  #     - example.local

# Deploys an Istio VirtualService and DestinationRule
istio:
  enabled: false
  gateways: []
  hosts:
    - example.local
  paths:
    - /
  loadBalancerType: ROUND_ROBIN
  useCustomLoadBalancer: false
  forceHttpRedirect: false
  customLoadBalancer: {}
    # consistentHash:
    #   httpCookie:
    #     name: my_cookie_name
  #     ttl: 300s
  mtls:
    enabled: false

#########################################################
# Stateful Sets                                         #
#########################################################
statefulSets:
  enabled: true
  statefulsets:
    - name: statefulSetWithImageString
      image: myImageOne
      port: 4000
      serviceType: "ClusterIP"
      replicaCount: 1
      command: "sh"
      args: ["-c", "sleep 1000"]
      volumes:
        - name: mydir
          hostPath:
            # Ensure the file directory is created.
            path: /var/local/aaa
            type: DirectoryOrCreate
      volumeMounts:
        - name: mydir
          mountPath: /mount
      env:
        ENVVAR: 'value'
      resources:
        limits:
          memory: 256Mi
      excludeGlobalExtraAnnotations: true
      extraAnnotations:
        imageType: "image string"
        annotationInfo: "exclude global, include extras"
        resources: "custom limits (limits.memory 256Mi, requests.cpu 200m, requests.memory 128Mi)"
    - name: statefulSetWithImageDict
      image:
        image: myImageTwo
        tag: myTagTwo
      port: 4000
      extraAnnotations:
        imageType: "full dictionary"
        annotationInfo: "include global and extras"
    - name: statefulSetWithImageOnly
      image:
        image: separateImageOnly
      port: 4000
      extraAnnotations:
        imageType: "dictionary with image only"
        annotationInfo: "include global and extras"
    - name: statefulSetWithTagOnly
      image:
        tag: separateTagOnly
      port: 4000
      extraAnnotations:
        imageType: "dictionary with tag only (should use default image with custom tag)"
        annotationInfo: "include global and extras"
    - name: statefulSetWithEmptyImage
      image:
      port: 4000
      excludeGlobalExtraAnnotations: true
      extraAnnotations:
        imageType: "empty dictionary (should use default)"
        annotationInfo: "exclude global, include extras"
    - name: statefulSetWithoutImageInfo
      excludeGlobalExtraAnnotations: true
      extraAnnotations:
        imageType: "none included (should use default)"
        annotationInfo: "exclude global, include extras"
      port: 4000

#############################################################
# Additional Deployments                                    #
#############################################################
extraDeployment:
  enabled: true
  hpaExtra: # autoscaling
    enabled: false
  deployments:
    - name: extra-redis-deployment-one
      image: redis
      port: 4000
      serviceType: "ClusterIP"
      replicaCount: 1
      command: "sh"
      args: ["-c", "sleep 1000"]
      volumes:
        - name: mydir
          hostPath:
            # Ensure the file directory is created.
            path: /var/local/aaa
            type: DirectoryOrCreate
      volumeMounts:
        - name: mydir
          mountPath: /mount
      env:
        ENVVAR: 'value'

      minPods: 2
      maxPods: 4
      cpuAverageUtilizationThreshold: 70

      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
    - name: extra-redis-deployment-two
      image: redis
      port: 4000
      serviceType: "ClusterIP"
      replicaCount: 1
      command: "sh"
      args: ["-c", "sleep 1000"]
      volumes:
        - name: mydir
          hostPath:
            # Ensure the file directory is created.
            path: /var/local/aaa
            type: DirectoryOrCreate
      volumeMounts:
        - name: mydir
          mountPath: /mount
      env:
        ENVVAR: 'value'

      minPods: 2
      maxPods: 4
      cpuAverageUtilizationThreshold: 70


############
# CronJobs #
############
cronJobs:
  enabled: true
  scheduled:
    - name: example-cronjob
      image: redis
      schedule: "30 * * * *" # every 30 min
      command: "sh"
      args: ["-c", "sleep 1000"]
      volumes:
        - name: mydir
          hostPath:
            # Ensure the file directory is created.
            path: /var/local/aaa
            type: DirectoryOrCreate
      volumeMounts:
        - name: mydir
          mountPath: /mount
      env:
        ENVVAR: 'value'

########
# Jobs #
########
jobs:
  enabled: true
  jobs:
    - name: example-job
      image: redis
      command: "sh"
      args: ["-c", "sleep 1000"]
      volumes:
        - name: mydir
          hostPath:
            # Ensure the file directory is created.
            path: /var/local/aaa
            type: DirectoryOrCreate
      volumeMounts:
        - name: mydir
          mountPath: /mount
      env:
        ENVVAR: 'value'
      extraAnnotations:
        jobExtraAnnotation: something
